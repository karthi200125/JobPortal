generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int         @id @default(autoincrement())
  username        String      @unique
  firstName       String?
  lastName        String?
  email           String      @unique
  password        String?
  role            Role
  isPro           Boolean     @default(false)
  userBio         String?
  userAbout       String?
  userImage       String?
  profileImage    String?
  gender          String?
  address         String?
  city            String?
  state           String?
  country         String?
  phoneNo         String?
  postalCode      String?
  profession      String?
  website         String?
  currentCompany  String?
  resume          String?
  skills          String[]

  postedJobs      Job[]       @relation("PostedJobs")

  jobApplications JobApplication[] 

  company         Company[]
  educations      Education[]
  experiences     Experience[]
  projects        Project[]

  followers       Int[]
  followings      Int[]
  savedJobs       Int[]       
  ProfileViews    Int[]
  employees       Int[]
  verifyEmps      Int[]

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Job {
  id          Int       @id @default(autoincrement())
  jobTitle    String
  jobDesc     String
  experience  String
  salary      String
  city        String
  state       String
  country     String
  type        String
  mode        String
  isEasyApply Boolean   @default(false)
  applyLink   String?
  vacancies   String
  skills      String[]
  questions   Json?   

  userId      Int
  user        User      @relation("PostedJobs", fields: [userId], references: [id], onDelete: Cascade)

  jobApplications JobApplication[] 

  companyId   Int
  company     Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model JobApplication {
  id                 Int      @id @default(autoincrement())
  userId             Int
  jobId              Int
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  job                Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)

  candidateEmail     String
  candidateMobile    String
  candidateResume    String   
  questionAndAnswers Json?

  isApplicationViewed Boolean @default(false)
  isResumeViewd       Boolean @default(false)
  isSelected          Boolean @default(false)
  
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt  
}


model Company {
  id                     Int       @id @default(autoincrement())  
  companyName            String    @unique
  companyImage           String
  companyBackImage       String
  companyAddress         String
  companyCity            String
  companyState           String
  companyCountry         String
  companyWebsite         String?
  companyAbout           String
  companyBio             String
  companyTotalEmployees  String
  companyEmployees       Int[]   
  companyIsVerified      Boolean   @default(false)

  userId                 Int   
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  jobs                   Job[]
  
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
}

model Education {
  id            Int      @id @default(autoincrement())
  instituteName String
  degree        String
  fieldOfStudy  String
  startDate     String
  endDate       String
  percentage    String  

  userId        Int   
  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Experience {
  id            Int      @id @default(autoincrement())
  companyName   String
  position      String
  startDate     String
  endDate       String
  description   String?

  userId        Int   
  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Project {
  id            Int      @id @default(autoincrement())
  proName       String
  proLink       String
  proImage      String
  proDesc       String  

  userId        Int   
  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum Role {
  CANDIDATE
  RECRUITER
  ORGANIZATION
}
